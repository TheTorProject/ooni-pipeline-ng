#!/usr/bin/env python3
"""Build application packages and upload them to bintray.
Works on TravisCI, CircleCI and locally. Detect which package need to be rebuilt.
Support "release" packages and PR/testing.
"""

# debdeps: git
from argparse import ArgumentParser
from os import getenv
from pathlib import Path
from requests.auth import HTTPBasicAuth
from subprocess import run
from typing import List
import requests
import sys

BINTRAY_API = "https://bintray.com/api/v1"
DEFAULT_ORG = "ooni"
DEFAULT_REPO = "internal-pull-requests"


def run2(cmd, **kw):
    p = run(cmd.split(), capture_output=True, **kw)
    if p.returncode != 0:
        raise Exception(f"'{cmd}' returned: {p.returncode}")
    return p.stdout.decode()


def runi(cmd: str, cwd: Path, sudo=False) -> None:
    if sudo:
        cmd = f"sudo {cmd}"
    run(cmd.split(), cwd=cwd, check=True)


def detect_changed_packages() -> List[Path]:
    DCH = "debian/changelog"
    commit = run2("git merge-base master HEAD")
    changes = run2(f"git diff --name-only {commit}")
    changes += "af/fastpath\n"
    pkgs = set()
    for c in changes.splitlines():
        c = Path(c)
        if c.as_posix().endswith(DCH):
            pkgs.add(c.parent.parent)
            continue
        while c.name:
            if c.joinpath(DCH).is_file():
                pkgs.add(c)
            c = c.parent

    return sorted(pkgs)


def trim_compare(url: str) -> str:
    """Shorten GitHub URLs used to compare changes"""
    if url.startswith("https://github.com/") and "..." in url:
        base, commits = url.rsplit("/", 1)
        if len(commits) == 83:
            beginning = commits[0:8]
            end = commits[43:43+8]
            return f"{base}/{beginning}...{end}"

    return url



def buildpkg(p) -> List[Path]:
    """Build one package, installing required dependencies"""
    print(f"Building package in {p}")
    ver = run2("dpkg-parsechangelog --show-field Version", cwd=p).strip()
    assert ver, f"No version number found in {p}/debian/changelog"
    sudo = True
    if getenv("CIRCLECI"):
        # Running in CircleCI
        sudo = False
        comp = trim_compare(getenv("CIRCLE_COMPARE_URL", ""))  # show changes in VCS
        if getenv("CIRCLE_PULL_REQUEST"):
            # This is a PR: build ~pr<N>-<N> version. CIRCLE_PR_NUMBER is broken
            pr_num = getenv("CIRCLE_PULL_REQUEST", "").rsplit("/", 1)[-1]
            build_num = getenv("CIRCLE_BUILD_NUM")
            ver = f"{ver}~pr{pr_num}-{build_num}"
            run2(f"dch -b -v {ver} {comp}", cwd=p)
            run2(f"dch -r {ver} {comp}", cwd=p)
            ver2 = run2("dpkg-parsechangelog --show-field Version", cwd=p).strip()
            assert ver == ver2, ver + " <--> " + ver2
        else:
            run2(f"dch -b -v {ver} {comp}", cwd=p)
            run2(f"dch -r {ver} {comp}", cwd=p)
            ver2 = run2("dpkg-parsechangelog --show-field Version", cwd=p).strip()
            assert ver == ver2, ver + " <--> " + ver2

    runi("apt-get build-dep -qy --no-install-recommends .", p, sudo=sudo)
    runi("fakeroot debian/rules build", p)
    runi("fakeroot debian/rules binary", p)
    with p.joinpath("debian/files").open() as f:
        return [p.parent.joinpath(line.split()[0]) for line in f]


def ci(args) -> None:
    # TODO: detect sudo presence
    err = "BINTRAY_USERNAME or BINTRAY_API_KEY environment variables not set"
    assert getenv("BINTRAY_USERNAME") and getenv("BINTRAY_API_KEY"), err
    run2("apt-get update -q")
    run2("apt-get install -qy --no-install-recommends git")
    pkgdirs = detect_changed_packages()
    if not pkgdirs:
        return
    print(f"Building {pkgdirs}")
    run2("apt-get install -qy --no-install-recommends devscripts")

    pkgs_lists = [buildpkg(pd) for pd in pkgdirs]
    for pli in pkgs_lists:
        for p in pli:
            upload(p, args)

def build() -> None:
    """Run manual build on workstation"""
    pkgdirs = detect_changed_packages()
    pkgs_lists = [buildpkg(pd) for pd in pkgdirs]
    print("Outputs:")
    for pli in pkgs_lists:
        for p in pli:
            print(p)


def upload(fi, args) -> None:
    """Upload to Bintray"""
    assert fi.is_file()
    pname, pver, arch = fi.name.split("_")
    btuser = getenv("BINTRAY_USERNAME")
    assert btuser
    auth = HTTPBasicAuth(btuser, getenv("BINTRAY_API_KEY"))
    url = f"{BINTRAY_API}/content/{args.org}/{args.repo}/{pname}/{pver}/{fi.name};deb_distribution=unstable;deb_component=main;deb_architecture=amd64;publish=1"
    with open(fi, "rb") as f:
        resp = requests.put(url, auth=auth, data=f)
    if not resp.ok:
        print(f"Error {resp.text} when calling {resp.request.url}")
        sys.exit(1)


def delete_bintray_package(args, extra) -> None:
    """Delete package from Bintray"""
    btuser = getenv("BINTRAY_USERNAME")
    assert btuser
    auth = HTTPBasicAuth(btuser, getenv("BINTRAY_API_KEY"))
    filename = extra[0]
    assert filename.endswith(".deb")
    url = f"{BINTRAY_API}/content/{args.org}/{args.repo}/{filename}"
    resp = requests.delete(url, auth=auth)
    if not resp.ok:
        print(f"Error {resp.text} when calling {resp.request.url}")
        sys.exit(1)


def main():
    ap = ArgumentParser(description=__doc__)
    ap.add_argument("action", choices=("upload", "scan", "ci", "build", "delete_from_bintray"))
    ap.add_argument(
        "-r", "--repo", default=DEFAULT_REPO, help="Bintray repository name"
    )
    ap.add_argument("-o", "--org", default=DEFAULT_ORG, help="Bintray org name")
    args, extra = ap.parse_known_args()
    if args.action == "ci":
        ci()
    elif args.action == "scan":
        print(sorted(detect_changed_packages()))
    elif args.action == "upload":
        for fn in extra:
            upload(Path(fn), args)
    elif args.action == "delete_from_bintray":
        delete_bintray_package(args, extra)
    elif args.action == "build":
        build()


if __name__ == "__main__":
    main()
